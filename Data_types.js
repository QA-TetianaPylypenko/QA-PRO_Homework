// Task 1
console.log("number" + 3 + 3);
// В результаті додавання до рядка цифр, ми отримаємо рядок "number33"

// Task 2
console.log(null + 3);
/*
Null це відсутнє значення, тому при додаванні до Null числа 3,
в результаті ми отримаємо 3
 */

// Task 3
console.log(5 && "qwerty");
/*
Так як перше значення 5 є true (більше 0) та друге значення "qwerty" також true,
тому в результаті ми отримаємо друге значення "qwerty"
 */

// Task 4
console.log(+'40' + +'2' + "hillel");
/*
Перед числами 40 та 2 стоїть унарний +, який перетворює ці вирази у звичайні числа,
які ми просто додаємо один до одного 40+2=42, та строка "hillel",
в результаті отримуємо "42hillel"
 */

// Task 5
console.log('10' - 5 === 6);
/*
"10" це рядок, але в виразі "10"-5 перетвориться на число,
в результаті ми отримаємо 10-5=5, === це знак порівряння,
тому 5===6 буде "false" у результаті, бо 5 не рівняється 6
 */

// Task 6
console.log(true + false);
// true равно 1, false равно 0, тому в результаті ми отримаємо 1+0=1

// Task 7
console.log('4px' - 3);
/*
Оскільки рядок '4px' не може бути конвертований в число,
результатом цього виразу буде NaN
 */

// Task 8
console.log('4' - 3);
/*
Рядок "4" конвертується у число 4, ми отримуємо вираз 4-3,
в результаті якого отримуємо 1
 */

// Task 9
console.log('6' + 3 ** 0);
/*
3 в ступені 0 дорівнює 1, тепер рядок "6" додаємо до 1,
в результаті отримуємо рядок "61", тому що при додаванні рядка до числа,
число перетворюється у рядок автоматично
 */

// Task 10
console.log(12 / '6');
/*
Рядок "6" при діленні автоматично перетворюється на число,
ми отримуємо вираз 12/6, що дорівнює 2
 */

// Task 11
console.log('10' + (5 === 6));
/*
Спочатку відбувається обчислення виразу 5 === 6, що виведе false,
після додавання рядка "10", ми отримаємо рядок "10false" у результаті
 */

// Task 11
console.log(null == '');
/*
При порівнянні null і будь-якого рядка, рядок буде перетворено в число,
так як пустий рядок "" це 0, в результаті перетворення ми отримаємо null == 0,
по правилам null рівне лише undefined і самому собі,
таким чином у результаті ми отримуємо false
 */

// Task 12
console.log(3 ** (9 / 3));
/*
Спочатку відбувається обчислення значень в дужках 9/3=3,
тепер відбувається зведення в ступень 3**3, в результаті ми отримуємо 27
 */

// Task 13
console.log(!!'false' == !!'true');
/*
Спочатку 'false' перетворюється в true, потім двічі застосовується оператор НЕ,
тобто false стає true, так само і для true, яке вже є true в логічному контексті,
результатом цього виразу буде true == true, що є true
 */

// Task 14
console.log(0 || '0' && 1);
/*
Оператор && має вищий пріоритет, тому він виконується першим,
отже в результаті цієї операції ми отримаємо 1, тому що "0" це не пустий рядок,
відповідно він true. Оператор || повертає перший істинний операнд або останній операнд,
якщо обидва ложні, в нашому випадку 0 це false, тому оператор поверне значення 1,
яке ми отримали в результаті операції з оператором &&
 */

// Task 15
console.log((+null == false) < 1);
/*
В цьому виразі +null перетворюється у null, а потім в число 0
далі відбувається порівняння 0 == false, при порівнянні різних
типів даних, JS перетворює дані до спільного типу, в нашому випадку
false = 0, таким чином 0 == 0 в результаті отримує true, далі маємо
вираз true < 1, де true дорівнює 1, таким чином отримуємо 1 < 1,
що в результаті дає false, бо 1 не є меншим за 1
*/

// Task 16
console.log(false && true || true);
/*
В цьму виразі перше ми дізнаємось значення для цієї операції false && true,
цей оператор виводить перше значення, якщо воно є false, в нашому випадку
ми отримуємо false, далі ми маємо вираз false || true, результатом якого буде true,
отже в результаті ми отримаємо true
 */

// Task 17
console.log(false && (false || true));
/*
В цьому виразі ми по перше дізнаємось значення виразу в дужках false || true
в результі отримуємо true, далі маємо вираз false && true, в результі отримуємо false
отже результат виразу є false
 */

// Task 18
console.log((+null == false) < 1 ** 5)
/*
В цьому виразі ми по перше знайдемо значення виразу в дужках, +null == false
результатом цього виразу буде true, тому що +null перетворюється на число 0,
false також перетворюється на 0, 0 == 0, це true, далі зводемо 1 у 5 ступінь,
в результаті отримуємо 1, далі залишається порівняти true < 1, де true
перетворюється на число 1, отримуємо 1 < 1, результат цього виразу false,
бо 1 не є менше 1
 */